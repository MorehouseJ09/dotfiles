[core]
  excludesfile = ~/.gitignore
  editor = vim


[push]
  default = simple


[color]
  ui = true


[alias]
  ###
  ### HUB SPECIFIC / BROWSING
  ###
  bb = !sh -c 'hub browse'
  bi = !sh -c 'hub browse -- issues'
  
  ### 
  ### SUBMODULES
  ###
  sc = submodule update --init
  sin = submodule update --init
  sup = submodule foreach "git fetch && git stash && git checkout origin/master"
  su = submodule foreach --recursive git submodule update --init
  sr = submodule foreach --recursive "git  add --all . && git stash && git fetch && git checkout master"

  # status + logs
  s = status --short --branch
  # from http://fredkschott.com/post/2014/02/git-log-is-so-2005/
  lg = log --color --date=local --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit
  one-line-log = log --pretty=oneline
  # diff / changes
  changedfiles = diff --name-status -r
  diffstat = diff --stat -r
  # shows new commits in a branch
  new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
  branchcommits = !git rev-list --count HEAD ^origin/master
  branchfiles = !git rev-list HEAD ^origin/master
  ls = ls-tree -r --name-only HEAD

  ### 
  ### COMMITTING / SAVING
  ### 
  aa = add --all
  af = add --force --all

  p = push
  pf = push --force
  pi = !sh -c 'git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)'
  pt = push --tags

  i = commit
  ia = commit -a
  sa = commit -a --amend --no-edit 
  ame = commit --amend
  emptycommit = commit --allow-empty -m 'temporary empty commit'

  ###
  ### FETCHING / SYNCHRONIZATION
  ###
  fp = !sh -c 'git fetch && git pull'
  fa = fetch --all
  resetorigin = !git fetch origin && git reset --hard origin/$(git rev-parse --abbrev-ref HEAD)
  co = checkout

  cl = clone
  clr = clone --recursive

  ### 
  ### BRANCH MANAGEMENT
  ### 
  b = for-each-ref --format='%(refname:short)' refs/heads/
  ba = branch -a
  BD = "!sh -c \"git branch -D \"$@\" && git push origin :\"$@\"\""
  bd = branch -D
  bc = rev-parse --abbrev-ref HEAD
  recentbranches = for-each-ref --count=10 --sort=-committerdate refs/heads/ --format='%(refname:short) '


  ### 
  ### CHERRY PICK / MERGING 
  ### 
  # cherry-pick
  cp = "!sh -c \"git cherry-pick \"$@\"\" -"

  # merge helpers
  m = merge --no-commit --no-ff
  me = merge
  ma = merge --abort
  mu = merge --union

  # rebase helpers
  ra = rebase --abort
  r = rebase
  ri = rebase -i
  rc = rebase --continue
  rs = rebase --skip
  squashbranch = !git rebase -i HEAD~$(git branchcommits)


  ### 
  ### STASH / FETCH
  ###
  st = stash
  stl = stash list
  sta = "!sh -c \"git stash apply stash@{\"$@\"}\""

  ### 
  ### TAGS
  ###
  t = tag
  td = tag --delete
  tl = tag --list
  pt = push --tags 


[merge "ours"]
  name = "Keep current HEAD during merge"
  driver = true


[github]
  password = !security find-generic-password -gs github.password -w | tr -d '\n'


[url "git@github.com:"]
  insteadOf = "gh:"
  insteadOf = "gist:"
  pushInsteadOf = "github:"
  pushInsteadOf = "gist:"

